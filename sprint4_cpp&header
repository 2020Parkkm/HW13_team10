//main.cpp
#include <iostream>
#include <Windows.h> // Sleep( )
#include <vector>
#include <fstream>
#include "q.h"

using namespace std;

int main() {
    int itime = 0, T = 1, ni, no, high = 0, sum = 0;
    float average = 0.0, Queue_fullness = 0.0;
    int NofPackets[120] = { 0 }; 


    ofstream xx; 
    xx.open("aa.txt");
    if (!xx) {
        cout << "Can't open file" << endl;
        return 666;
    }
    ofstream yy; 
    yy.open("yy.txt");
    if (!yy) {
        cout << "Can't open file" << endl;
        return 666;
    }

    mqueue a(10, 20, 100); 

    while (itime < 120) {
        itime += T;

        Sleep(T * 1000); 
        cout << "Elapsed time[sec] = " << itime << endl; 

        
        a.newin();
        
        a.newout();

        NofPackets[itime - 1] = a.queue.size();
        cout << "NofPackets: " << NofPackets[itime - 1] << endl << endl;

        if (high < NofPackets[itime - 1]) { 
            high = NofPackets[itime - 1];
        }

        sum += NofPackets[itime - 1]; 

    }

    Queue_fullness = static_cast<float>(NofPackets[119]) / a.capacity * 100;   
    average = static_cast<float>(sum) / itime;

    int j = 0;
    for (int a : NofPackets) {
        j++;
        xx << j << " " << a << endl;
    }

    yy << a.Packet_loss_rate << Queue_fullness << endl;



    cout << "Highest: " << high << " Average: " << average << endl;
    cout << "Packet loss rate " << a.Packet_loss_rate << " Queue fullness % " << Queue_fullness << endl;
    cout << NofPackets[30] << " " << a.capacity << endl;
    cout << a.lost << " " << a.xxx << endl;
    xx.close();
    yy.close();

    return 123;
}



#pragma once
//q.h
#include <iostream>
#include <vector>
#include <Windows.h>
using namespace std;

class mqueue : public vector<int> {
public:
    mqueue(int Ni, int No, int Capacity) : NI(Ni), NO(No), capacity(Capacity), lost(0) {};

    int NI, NO, capacity, lost, ni, no;
    vector <int> queue;
    int xxx = NO / NI;
    int Queue_fullness;
    int Packet_loss_rate;
    void newin() {
        ni = rand() % NI;
        cout << "ni: " << ni << endl;

        if (capacity < queue.size() + ni) { 
            lost += queue.size() + ni - capacity;
            ni = capacity - queue.size();
            cout << "Overflow" << endl;
            Packet_loss_rate = lost;
        }

        for (int i = 0; i < ni; i++) {
            queue.push_back(rand() % 20);
            cout << queue[queue.size() - 1] << " in " << queue.size() << endl;
        }
        cout << endl;


    }
    void newout() {
        no = rand() % NO;
        cout << "no: " << no << endl;

        for (int i = 0; i < no && !queue.empty(); i++) {
            int ii = queue[0];
            cout << ii << " out " << queue.size() << endl;
            queue.erase(queue.begin());
        }
        cout << endl;
    }
};



